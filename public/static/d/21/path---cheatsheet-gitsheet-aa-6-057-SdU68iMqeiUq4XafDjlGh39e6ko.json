{"data":{"markdownRemark":{"html":"<h1>Roi's GITsheet</h1>\n<ul>\n<li>\n<p><code>git init</code> # make a git repository with nothing</p>\n</li>\n<li>\n<p><code>git remote add origin &#x3C;name> path-to-repo</code></p>\n</li>\n<li>\n<p><code>git status --short -uno</code> (only files that git tracks)</p>\n</li>\n<li>\n<p><code>git log</code> </p>\n</li>\n<li>\n<p><code>git diff</code> and to exclude <code>git diff ':(exclude)./package-lock.json'</code></p>\n</li>\n<li>\n<p><code>git apply</code></p>\n</li>\n</ul>\n<h2><strong><em>\"Working Directory -> staged snapshot -> commit history\"</em></strong></h2>\n<ul>\n<li>\n<p><code>git add</code> # adds from working area</p>\n</li>\n<li>\n<p><code>git commit -m \"message\"</code></p>\n</li>\n</ul>\n<h2>reset:</h2>\n<ul>\n<li><code>git reset HEAD~\"num\"</code> # go back num commits\n** <code>--soft</code> # move commits to staging snapshot\n** <code>--mixed</code> # default, move commits to working directory\n** <code>--hard</code> # remove all num commits completly</li>\n<li><code>git reset HEAD~\"num\" \"filepath\"</code> - file only gets from staged snapshot to working directory\n<em>can be used from commit and puts file both is staged snapshot and working directory</em></li>\n</ul>\n<p><strong><code>git revert</code> is only used to make a new commit that reverts to a previous commit.</strong></p>\n<h2>Checkout:</h2>\n<ul>\n<li><code>git checkout \"branch_name\"</code> # move branch</li>\n<li><code>git checkout HEAD~\"num\"</code> \"filepath\" # checks out a new HEAD~\"num\" file\n<em>if no num - kinda like svn revert -R \"filepath\" (also git reset --hard HEAD)</em></li>\n</ul>\n<h2>branch</h2>\n<ul>\n<li><code>git checkout -b</code></li>\n<li><code>git branch \"name\"</code></li>\n</ul>\n<h2>rebase</h2>\n<ul>\n<li><code>git rebase -i HEAD~&#x3C;NUM></code># interactive - commit actions (like sqaush)</li>\n<li><code>git rebase another</code> # to put our branch on top of another</li>\n</ul>\n<h2>merge</h2>\n<ul>\n<li><code>git merge \"branch_name\"</code> # update branch (like master) from other branch</li>\n<li><code>git merge \"branch_from\" \"branch_to\"</code></li>\n</ul>\n<h2>stash</h2>\n<ul>\n<li><code>git stash -</code> # to get all stash actions</li>\n</ul>\n<h2>talk to repo and rebase</h2>\n<ul>\n<li><code>git pull</code> # is a git fetch than git merge on the current branch</li>\n<li><code>git rebase &#x3C;branch_name></code> # same as before only takes the branche name changes (not updated to server). in order to update - git pull the branch name before</li>\n<li><code>git push -u/-f origin &#x3C;branch_name></code></li>\n</ul>\n<h2>for justin</h2>\n<ul>\n<li><code>git fetch</code> # updates local info about server changes</li>\n<li><code>git rebase origin/&#x3C;branch_name></code> # rabases the current branch changes on top of branch name server changes</li>\n</ul>\n<p><em><code>vi ~/.gitconfig</code></em></p>","frontmatter":{"date":"November 07, 2017","path":"/cheatsheet/gitsheet","title":"GITsheet"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}