{"data":{"markdownRemark":{"html":"<h1>Roi's code concepts</h1>\n<h2>Generics Variance, Covariance</h2>\n<ul>\n<li>\n<p>consumer -> In</p>\n<pre><code class=\"language-kotlin\">Comparable&#x3C;in T>\nfun foo(numberComparable: Comparable&#x3C;Number>) {\n    val doubleComparable: Comparable&#x3C;Double> = numberComparable\n}\n</code></pre>\n<p>Use in means classes inheriting from T\na Number is a like a double with less functionality but it has compare so we can use it in Comparable anyway</p>\n</li>\n<li>\n<p>producer -> out</p>\n<pre><code class=\"language-kotlin\">List&#x3C;out T>\nval doubleList: List&#x3C;Double> = listOf(1.0, 2.0)\nval numberList: List&#x3C;Number> = doubleList\n</code></pre>\n<p>Use out means super classes of T\nIf we want List to be able to have inside it classes inheriting from T</p>\n</li>\n<li>\n<p>Covariance means that the type F[B] is a subtype of the type F[A] if B is a subtype of A.</p>\n<pre><code class=\"language-scala\">trait List[+A]\ntrait Option[+A]\n\nsealed trait Shape\ncase class Circle(radius: Double) extends Shape\nval circles: List[Circle] = ???\nval shapes: List[Shape] = circle\n</code></pre>\n</li>\n<li>\n<p>contravariance means that the type F[B] is a subtype of F[A] if A is a subtype of B.</p>\n<pre><code class=\"language-scala\">trait StringMe[-A] {\n  def show(a: A): String\n}\nsealed trait Shape\ncase class Circle(radius: Double) extends Shape\nval shape: Shape = Circle(1)\nval circle: Circle = Circle(100)\nval shapeCanString: StringMe[Shape] =\n  new StringMe[Shape] {\n    def show(shape: Shape) = s\"Shape\"\n  }\nval circleCanString: StringMe[Circle] = shapeCanString\n  // new StringMe[Circle] {\n  //   def show(circle: Circle) = s\"Shape + ${circle.radius}\"\n  // }\ndef stringifier[A](value: A, stringer: StringMe[A]): String = stringer.show(value)\n\nstringifier(shape, shapeCanString) // Shape\nstringifier(circle, shapeCanString) // Shape\n//show2(shape, circleCanShow) // compiler error trait cant use a subtype of Shape for Shape\nstringifier(circle, circleCanString) // Shape // Shape + 100.0\n</code></pre>\n<p>we can see we can show circle as a shape but not shape as a circle!\nmeaning StringMe[Shape] is a subtype of StringMe[Circle]</p>\n</li>\n</ul>","frontmatter":{"path":"/cheatsheet/CodeConceptsSheet","title":"CodeConceptsSheet"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}